//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/practical work/TouchInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchInput"",
    ""maps"": [
        {
            ""name"": ""ScreenInput"",
            ""id"": ""fd251c34-7cb6-4c7e-aa14-304549896ae2"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""14f3fd3f-f7ae-4869-88f7-337a0c3a6e9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7dbff5ec-73c5-4ef0-99cc-ea0d046a2c4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8958275c-9886-4579-ab77-fbd91b0fb521"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b0c449c-4814-4530-961e-9349f5a1c362"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ScreenInput
        m_ScreenInput = asset.FindActionMap("ScreenInput", throwIfNotFound: true);
        m_ScreenInput_Touch = m_ScreenInput.FindAction("Touch", throwIfNotFound: true);
        m_ScreenInput_TouchPosition = m_ScreenInput.FindAction("TouchPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ScreenInput
    private readonly InputActionMap m_ScreenInput;
    private List<IScreenInputActions> m_ScreenInputActionsCallbackInterfaces = new List<IScreenInputActions>();
    private readonly InputAction m_ScreenInput_Touch;
    private readonly InputAction m_ScreenInput_TouchPosition;
    public struct ScreenInputActions
    {
        private @TouchInput m_Wrapper;
        public ScreenInputActions(@TouchInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_ScreenInput_Touch;
        public InputAction @TouchPosition => m_Wrapper.m_ScreenInput_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_ScreenInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScreenInputActions set) { return set.Get(); }
        public void AddCallbacks(IScreenInputActions instance)
        {
            if (instance == null || m_Wrapper.m_ScreenInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ScreenInputActionsCallbackInterfaces.Add(instance);
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
        }

        private void UnregisterCallbacks(IScreenInputActions instance)
        {
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
        }

        public void RemoveCallbacks(IScreenInputActions instance)
        {
            if (m_Wrapper.m_ScreenInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IScreenInputActions instance)
        {
            foreach (var item in m_Wrapper.m_ScreenInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ScreenInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ScreenInputActions @ScreenInput => new ScreenInputActions(this);
    public interface IScreenInputActions
    {
        void OnTouch(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
}
